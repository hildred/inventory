#!/usr/bin/perl

# syntax: script values [input.sm]

# where values is a file consisting of definitions, directives, and comments,
# one per line.
# comments match the patern /^[ ^t]*#.*$/ or /^[ ^t]*$/.
# definitions are in the form name [:]= value or name [:]= "value".
# directives are in the form name : args.
# set... directives set variables to automatic values.
# currently no other derectives are defined.

# input.sm is the name of an input file ending in the string .sm. the output
# file name is determined by striping of the extension. if input is ommited 
# standard input and output are used. input is copied to
# output replacing variables in the form ${name} with the corisponding value.

use strict;
use warnings;
use Symbol 'qualify_to_ref';

my $dostdio = 1;
my %var;
my %direct;
sub myfunc(**){
	my $in=qualify_to_ref(shift, caller);
	my $out=qualify_to_ref(shift, caller);
	while(<$in>){
		s/\${([^}]*)}/$var{$1}/eg;
		s/\$\(([^)]*)\)/$var{$1}/eg;
		print $out $_;
	}
}
$direct{setnow}=sub {
	my @m = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
	my @dow = qw( Sun Mon Tue Wed Thu Fri Sat );
	my ($sec,$min,$hour,$mday,$mon,$year,$wday) = gmtime;
	$var{$_[0]}=sprintf('%s, %02d %s %04d %02d:%02d:%02d +0000',$dow[$wday],$mday, $m[$mon], 1900+$year, $hour, $min, $sec);
};
$direct{setemail}=sub {
	return $var{$_[0]}=$ENV{EMAIL}if$ENV{EMAIL};
	die 'unfinished';
};
{
	my $name=shift;
	die unless $name;
	open(my $n, '<', $name)or die "error opening file $name";
	while(<$n>){
		next if /^[ 	]*#/;
		next if /^[ 	]*$/;
		s/^[ 	]*//;
		s/[ 	]*$//;
		s/^([^ 	:=]*)[ 	]*:?=[ 	]*(['"])(.*)\2$/$var{$1}=$3;'';/e;
		s/^([^ 	:=]*)[ 	]*:[ 	]*([^=].*)$/$direct{$1}($2);'';/e;
		s/\${([^}]*)}/$var{$1}/eg;
		s/\$\(([^)]*)\)/$var{$1}/eg;
		s/^([^ 	:=]*)[ 	]*:?=[ 	]*(.*)$/$var{$1}=$2;'';/e;
		next if /^[ 	]*$/;
		print;
		warn;
	}
}
while (@ARGV||$dostdio){
	unless(defined $ARGV[0]){
		if($dostdio){
			$dostdio--;
			myfunc STDIN, STDOUT;
		}else{
			die;
		}
	}elsif($ARGV[0] eq 'debug'){
		shift;
		print $_,'="',$var{$_},'"',"\n" foreach (keys %var);
	}elsif($ARGV[0]=~m!^(.*)\.sm!){
		my $base=$1;
		my $in=shift;
		open my$fin, '<', $in or die;
		open my$fout, '>', $base or die;
		myfunc $fin, $fout;
		if($dostdio){
			$dostdio--;
		}
	}elsif($ARGV[0]eq'-'){
		myfunc STDIN, STDOUT;
		if($dostdio){
			$dostdio--;
		}
	}else{
		die "bad arg";
	}
}
