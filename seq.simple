#!/usr/bin/perl

use strict;
use warnings;
use Inventory::DBI;
use Inventory::Config;

my $root=$Iventory::Config::root;
my $lcount=$Iventory::Config::lcount;
my %type=%Iventory::Config::type;

dbconnect() unless $Inventory::DBI::dbh;

sub printline($;$$){
	my $label=shift;
	my $descr=shift;
	my $times=shift;

	my @object=get_object $label;

	if(@object){
		my($location, $type, $description, $secondaryid, $suplemental)=@object;
		unless(defined $descr){
			$descr=$description;
		}elsif($descr==$description){
			warn 'noop' if 0;
		}else{
			die 'description mismatch';
		}
		unless(defined $descr){
			$descr='';
			warn "null descr on $label";
		}
	}else{
		if(defined $descr){
			if($label =~ m!^ITEM/!){
				new_object($label,$descr,'ITEM');
			}elsif($label =~ m!^BOX/!){
				new_object($label,$descr,'BOX');
			}elsif($label =~ m!^SHELF/!){
				new_object($label,$descr,'SHELF');
			}elsif($label =~ m!^ROOM/!){
				new_object($label,$descr,'ROOM');
			}else{
				warn "unknown label type";
			}
		}else{
			$descr='';
		}
	}

	$times=1 unless $times;
	for(my $i=1;$i<=$times;$i++){
		printf q("%s","%s/%1$s","%s")."\n",$label,$root,$descr;
	}
}

sub printitem($$;$$){
	my $label=shift;
	my $count=shift;
	my $times=shift;
	my $descr=shift;

	printline $label.'/'.$count, $descr, $times;
}

sub printseq($@){
	my $label=shift;
	my $start=shift;
	my $times=shift;
	my $count=shift;

	$times=1 unless $times;
	$count=$lcount/$times unless $count;

	foreach my $seq (0 ..$count-1){
		printitem $label,$start++,$times;
	}
}

print "bar,qr,description\n";
@ARGV=sort keys %type unless @ARGV;
foreach my $type (@ARGV) {
	if($type=~m!/!){
		#type/dups/count
		my($a,@b)=split m!/!, $type;
		printseq($a,$type{$a},@b);
	}else{
		printseq($type,$type{$type});
	}
}

0;

################ Documentation ################
__END__
